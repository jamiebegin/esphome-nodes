esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  area: ${area}

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pwd
  fast_connect: False
  reboot_timeout: 2min
  domain: !secret domain
  manual_ip:
    static_ip: ${ip_addr}
    gateway: !secret gateway
    subnet: !secret subnet
    dns1: !secret dns_server

  ap:
    ssid: "${name}"
    password: !secret fallback_ap_pwd

time:
  - platform: sntp
    id: sntp_time
    timezone: !secret timezone
    servers: !secret ntp_server

mqtt:
  broker: !secret mqtt_broker
  topic_prefix: esphome/devices/${name}
  birth_message:
    topic: esphome/availability/${name}
    payload: online
  will_message:
    topic: esphome/availability/${name}
    payload: offline

# #######################################
debug:
  update_interval: 5s

logger:
  level: debug
  on_message:
    - level: ERROR
      then:
        - mqtt.publish:
            retain: false
            qos: 1
            topic: esphome/device_logs/${name}/error
            payload: !lambda |-
              // Use ESPHome's str_sprintf to avoid operator+ pitfalls and type issues.
              return str_sprintf("Triggered on_message with level %d, tag %s and message %s",
                                 level, tag, message);
    - level: WARN
      then:
        - mqtt.publish:
            retain: false
            qos: 1          
            topic: esphome/device_logs/${name}/warning
            payload: !lambda |-
              return str_sprintf("Triggered on_message with level %d, tag %s and message %s",
                                 level, tag, message);

api:

ota:
  - platform: esphome
# #######################################

switch:
  - platform: restart
    name: "Restart"
  - platform: shutdown
    name: "Shutdown"    
  - platform: factory_reset
    name: "Factory Reset"

button:
  - platform: safe_mode
    name: "Safe Mode Boot"
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Status"

sensor:
  - platform: wifi_signal
    id: wifi_signal_dbm
    name: "Wifi Signal"
    update_interval: 1min
    force_update: true
    expire_after: 1h
    filters:
      - exponential_moving_average:
          alpha: 0.1
          send_every: 240
          send_first_at: 1

  - platform: uptime
    name: Uptime
    expire_after: 15min

  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
      filters:
        - max:
            window_size: 12
            send_every: 6
            send_first_at: 3

text_sensor:
  - platform: version
    name: "ESPHome Version"
    icon: "mdi:chip"

  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: "mdi:ip-network"
    ssid:
      name: "Connected SSID"
      icon: "mdi:wifi-settings"
    bssid:
      name: "Connected BSSID"
      icon: "mdi:bluetooth-settings"
    mac_address:
      name: "WiFi MAC Address"
      icon: "mdi:lan"
    scan_results:
      name: "WiFi Scan Results"
      icon: "mdi:wifi-arrow-left-right"
    dns_address:
      name: "DNS Address"
      icon: "mdi:server-network"

  - platform: template
    name: "Board"
    icon: "mdi:expansion-card"
    update_interval: 5d
    lambda: |-
      // Return a std::string directly; don't call std::to_string on a C-string.
      return std::string("${board}");

  - platform: template
    name: "WiFi Signal Quality"
    icon: "mdi:wifi-star"
    lambda: |-
      if (int(id(wifi_signal_dbm).state) >= -30) {
        return {"Perfect"};
      }
      else if (int(id(wifi_signal_dbm).state) >= -50) {
        return {"Excellent"};
      }
      else if (int(id(wifi_signal_dbm).state) >= -60) {
        return {"Good"};
      }
      else if (int(id(wifi_signal_dbm).state) >= -67) {
        return {"Marginal"};
      }
      else if (int(id(wifi_signal_dbm).state) >= -70) {
        return {"Poor"};
      }
      else if (int(id(wifi_signal_dbm).state) >= -80) {
        return {"Unstable"};
      }  
      else if (int(id(wifi_signal_dbm).state) >= -90) {
        return {"Unusable"};
      }
      else {
        return {"unknown"};
      }                  
